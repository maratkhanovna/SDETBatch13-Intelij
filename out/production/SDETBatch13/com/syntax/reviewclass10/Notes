Method Overriding:
    When same method exists in parent and child class.
Why we should use method overriding?
    Same method can behave differently on different objects.
    It allows us to achieve polymorphism.
What is the syntax to achieve method overriding:
    Redefine the method with the same header inside the child class.
class Parent{
  void sleep(){
  sout"I sleep 8 hours";
  }
}
class Child extends Parent{
  void sleep(){
  sout"I sleep 6 hours";
  }
  public static void main(String[]args){
  Parent parent = new Child();   //polymorphism
  parent.sleep();
  }
}

Rules:
    1) There should be inheritance between classes.
    2) Method header should be same(access modifiers, return type, method name, parameters).
    3) We can't override the private methods because private methods don't participate in inheritance.
    4) Constructors can't be overridden because they also don't participate in inheritance.
    5) We can only increase the visibility of a method inside the child class
    but we can't decrease it. For example if a method is declared as protected ot default we can change it
    to public, but we can't do reverse.
    6) We don't say we override the static methods we say we have declared the static methods
    7) Methods that are declared with the final keyword can not be overridden.
============================================================================================================
final keyword:
    final in java represent completeness. If something is complete and does not need any modification
    then we use the final keyword with that entity.
1) When final is used with properties/fields/instance variables we can't reassign those variables
2) When used with methods these methods can't be overridden in child classes.
3) When used with class names no other class can inherit from that class.
============================================================================================================
Abstraction:
     is hiding the implementation details and only showing the functionality.
Why we should use Abstraction:
    With the help of Abstraction we can reduce the complexity of code by only focusing on the input/output
    of a method instead of focusing on the logic of that method.
What is the syntax for Abstraction:
    Whenever we have to create abstract methods we don't provide the implementation/body of the method
    we only provide the header of the method an we use the abstract keyword.
Rules:
    1) Abstract methods can't have a body.
    2) Abstract classes can have abstract and non-abstract methods.
    3) Abstract classes can't be instantiated(means we can not create the object of that class).
    4) Abstract classes cant' be declared final.
    5) We use abstract keyword for abstract classes and methods.
    6) If we inherit, child class has to implement the methods or we can declare the child class as abstract too.
=============================================================================================================
Interfaces:
    are contracts that classes implement. We can also achieve abstraction with interfaces.
Why should we use interfaces:
    1) They allow multiple inheritance.
    2) They don't have the issue of tightly coupled code(when something is changed in parent class it cascades down to children classes).
Syntax to use interfaces:
    interface nameOfInterface{
    }
Rules:
    1) All variables in interfaces are public static final.
    2) No instance variables.
    3) Constructors are also not allowed.
    4) By default methods are public and abstract.
    5) A single class can implement many interfaces.
    6) An interface can extend another interface.





